/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
int sort(const void* a , const void* b)
{
    return (*(int*)a - *(int*)b);
}
struct ListNode* sortList(struct ListNode* head){
    if(!head)
        return 0;
    if(!head->next)
        return head;
    int arr[1000001] = {0} , size = 0;
    struct ListNode* ptr = head;
    while(ptr)
    {
        arr[size++] = ptr->val;
        ptr = ptr->next;
    }
    qsort(arr,size,sizeof(int),sort);
    ptr = head;
    for( int i = 0 ; i < size ; i++)
    {
        ptr->val = arr[i];
        ptr = ptr->next;
    }
    return head;
}



---------------------------------------------------------------------------------


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* merge(struct ListNode* l1, struct ListNode* l2) {
    if (l1 == NULL) return l2;
    if (l2 == NULL) return l1;

    if (l1->val < l2->val) 
    {
        l1->next = merge(l1->next, l2);
        return l1;
    } 
    else 
    {
        l2->next = merge(l1, l2->next);
        return l2;
    }
}

struct ListNode* sortList(struct ListNode* head) {
    if (head == NULL || head->next == NULL)
        return head;

    struct ListNode* slow = head;
    struct ListNode* fast = head;
    struct ListNode* prev = NULL;

    while (fast != NULL && fast->next != NULL) {
        prev = slow;
        slow = slow->next;
        fast = fast->next->next;
    }

    prev->next = NULL;

    struct ListNode* l1 = sortList(head);
    struct ListNode* l2 = sortList(slow);

    return merge(l1, l2);
}
